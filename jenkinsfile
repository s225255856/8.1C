pipeline {
    agent any

    environment {
        DIRECTORY_PATH = 'true'
        PRODUCTION_ENVIRONMENT = 'production environment'
    }
    
    stages {
        stage('Build') {
            steps {
                echo 'Fetch the source code from the directory path specified by the environment variable'
                echo 'Compile the code and generate any necessary artefacts using VSC'
            }
        }
        stage('Uni and Integration Test') {
            steps {
                echo 'Unit tests using mocha'
                echo 'Integration tests using mocha'
            }
            post {
                success {
                    emailext to: "mychi82003@gmail.com",
                        subject: "Testing Status Email",
                        body: "Test was successful"
                }
            }
        }
        stage('Code analysis') {
            steps {
                echo 'Analysing code using SonarQube'
            }
        }
        stage('Security Scan') {
            steps {
                echo 'Scanning for security using OpenVAS'
            }
            post {
                script {
                    def logSize = sh(script: "stat --printf='%s' build.log", returnStdout: true).trim().toInteger()
                    if (logSize < 5000000) { // Limit to 5MB (adjust as needed)
                        emailext attachmentsPattern: 'build.log',
                            to: "mychi82003@gmail.com",
                            subject: "Build Notification",
                            body: "Build completed successfully. Check logs at ${env.BUILD_URL}console"
                    } else {
                        emailext to: "mychi82003@gmail.com",
                            subject: "Build Notification - Log Too Large",
                            body: "Build completed successfully, but the log size (${logSize} bytes) exceeds the limit. View logs at ${env.BUILD_URL}console"
                    }
                }

            }
        }
        stage('Deploy to Staging') {
            steps {
                echo 'Deploying to staging server using AWS'
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo 'Integration testing on staging server using AWS'
            }
        }
        stage('Deploy to Production') {
            steps {
                echo "Deploy to ${env.PRODUCTION_ENVIRONMENT} using AWS"
            }
        }
    }
}
