pipeline {
    agent any

    environment {
        DIRECTORY_PATH = 'true'
        TESTING_ENVIRONMENT  = 'true'
        PRODUCTION_ENVIRONMENT = 'production environment'
    }
    
    stages {
        stage('Build') {
            steps {
                echo 'Fetch the source code from the directory path specified by the environment variable'
                echo 'Compile the code and generate any necessary artefacts using VSC'
            }
        }
        stage('Uni and Integration Test') {
            steps {
                echo 'Unit tests using mocha'
                echo 'Integration tests using mocha'
            }
            post{
                success{
                    mail to: "mychi82003@gmail.com",
                    subject: "Testing status email",
                    body: "Test was successful, log: ${currentBuild.fullDisplayName}"
                }
            }
        }
        stage('Code analysis') {
            steps {
                echo 'Analysing code using SonarQube'
            }
        }
        stage('Security Scan') {
            steps {
                echo 'Scanning for security using OpenVAS'
            }
            post{
                always {
                    emailext attachLog: true, 
                        body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
                        recipientProviders: [developers(), requestor()],
                        subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}"
                }
            }
        stage('Deploy to Staging') {
            steps {
                echo 'Deploying to staging server using AWS'
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo 'Integration testing on staging server using AWS'
            }
        }
        stage('Deploy to Production') {
            steps {
                echo "Deploy to ${env.PRODUCTION_ENVIRONMENT} using AWS"
            }
        }
    }
}